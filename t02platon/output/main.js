"use strict";class t{constructor(t,s,i){null==t?(this.x=0,this.x,this.z=0):"object"==typeof t?3==t.lenght?(this.x=t[0],this.y=t[1],this.z=t[2]):(this.x=t.x,this.y=t.y,this.z=t.z):null==s&&null==i?(this.x=t,this.y=t,this.z=t):null==i?(this.x=t,this.y=s,this.z=0):(this.x=t,this.y=s,this.z=i)}dot(t){return null==t?this:this.x*t.x+this.y*t.y+this.z*t.z}add(t){return null==t?this:"number"==typeof t?s(this.x+t,this.y+t,this.z+t):s(this.x+t.x,this.y+t.y,this.z+t.z)}sub(t){return null==t?this:"number"==typeof t?s(this.x-t,this.y-t,this.z-t):s(this.x-t.x,this.y-t.y,this.z-t.z)}mul(t){return null==t?this:"number"==typeof t?s(this.x*t,this.y*t,this.z*t):s(this.x*t.x,this.y*t.y,this.z*t.z)}div(t){return null==t?this:"number"==typeof t?s(this.x/t,this.y/t,this.z/t):s(this.x*t.x,this.y*t.y,this.z*t.z)}transform(t){return null==t?this:s((this.x,t.m[0][0],this.y,t.m[1][0],this.z,t.m[2][0],t.m[3][0],this.x,t.m[0][1],this.y,t.m[1][1],this.z,t.m[2][1],t.m[3][1],this.x*t.m[0][2]+this.y*t.m[1][2]+this.z*t.m[2][2]+t.m[3][2]))}len(){let t=this.dot(this);return 1==t||0==t?t:Math.sqrt(t)}normalize(){let t=this.len();return 1==t||0==t?this:this.div(t)}cross(t){return null==t?this:s(this.y*t.z-this.z*t.y,this.z*t.x-this.x*t.z,this.x*t.y-this.y*t.x)}}function s(...s){return new t(...s)}function i(t){return t*Math.PI/180}class h{constructor(t=null){null==t||null==t?this.m=[[1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]]:"object"==typeof t&&4==t.length?this.m=t:this.m=t.m}mul(t){let s=o();return s.m[0][0]=this.m[0][0]*t.m[0][0]+this.m[0][1]*t.m[1][0]+this.m[0][2]*t.m[2][0]+this.m[0][3]*t.m[3][0],s.m[0][1]=this.m[0][0]*t.m[0][1]+this.m[0][1]*t.m[1][1]+this.m[0][2]*t.m[2][1]+this.m[0][3]*t.m[3][1],s.m[0][2]=this.m[0][0]*t.m[0][2]+this.m[0][1]*t.m[1][2]+this.m[0][2]*t.m[2][2]+this.m[0][3]*t.m[3][2],s.m[0][3]=this.m[0][0]*t.m[0][3]+this.m[0][1]*t.m[1][3]+this.m[0][2]*t.m[2][3]+this.m[0][3]*t.m[3][3],s.m[1][0]=this.m[1][0]*t.m[0][0]+this.m[1][1]*t.m[1][0]+this.m[1][2]*t.m[2][0]+this.m[1][3]*t.m[3][0],s.m[1][1]=this.m[1][0]*t.m[0][1]+this.m[1][1]*t.m[1][1]+this.m[1][2]*t.m[2][1]+this.m[1][3]*t.m[3][1],s.m[1][2]=this.m[1][0]*t.m[0][2]+this.m[1][1]*t.m[1][2]+this.m[1][2]*t.m[2][2]+this.m[1][3]*t.m[3][2],s.m[1][3]=this.m[1][0]*t.m[0][3]+this.m[1][1]*t.m[1][3]+this.m[1][2]*t.m[2][3]+this.m[1][3]*t.m[3][3],s.m[2][0]=this.m[2][0]*t.m[0][0]+this.m[2][1]*t.m[1][0]+this.m[2][2]*t.m[2][0]+this.m[2][3]*t.m[3][0],s.m[2][1]=this.m[2][0]*t.m[0][1]+this.m[2][1]*t.m[1][1]+this.m[2][2]*t.m[2][1]+this.m[2][3]*t.m[3][1],s.m[2][2]=this.m[2][0]*t.m[0][2]+this.m[2][1]*t.m[1][2]+this.m[2][2]*t.m[2][2]+this.m[2][3]*t.m[3][2],s.m[2][3]=this.m[2][0]*t.m[0][3]+this.m[2][1]*t.m[1][3]+this.m[2][2]*t.m[2][3]+this.m[2][3]*t.m[3][3],s.m[3][0]=this.m[3][0]*t.m[0][0]+this.m[3][1]*t.m[1][0]+this.m[3][2]*t.m[2][0]+this.m[3][3]*t.m[3][0],s.m[3][1]=this.m[3][0]*t.m[0][1]+this.m[3][1]*t.m[1][1]+this.m[3][2]*t.m[2][1]+this.m[3][3]*t.m[3][1],s.m[3][2]=this.m[3][0]*t.m[0][2]+this.m[3][1]*t.m[1][2]+this.m[3][2]*t.m[2][2]+this.m[3][3]*t.m[3][2],s.m[3][3]=this.m[3][0]*t.m[0][3]+this.m[3][1]*t.m[1][3]+this.m[3][2]*t.m[2][3]+this.m[3][3]*t.m[3][3],s}determ(){return+this.m[0][0]*m(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])+-this.m[0][1]*m(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])+ +this.m[0][2]*m(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])+-this.m[0][3]*m(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])}inverse(){r=o();let t=this.determ();return 0==t?o():(r.A[0][0]=+m(this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][0]=-m(this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][0]=+m(this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][0]=-m(this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][1]=-m(this.m[0][1],this.m[0][2],this.m[0][3],this.m[2][1],this.m[2][2],this.m[2][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][1]=+m(this.m[0][0],this.m[0][2],this.m[0][3],this.m[2][0],this.m[2][2],this.m[2][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][1]=-m(this.m[0][0],this.m[0][1],this.m[0][3],this.m[2][0],this.m[2][1],this.m[2][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][1]=+m(this.m[0][0],this.m[0][1],this.m[0][2],this.m[2][0],this.m[2][1],this.m[2][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][2]=+m(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[3][1],this.m[3][2],this.m[3][3])/t,r.A[1][2]=-m(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[3][0],this.m[3][2],this.m[3][3])/t,r.A[2][2]=+m(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[3][0],this.m[3][1],this.m[3][3])/t,r.A[3][2]=-m(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[3][0],this.m[3][1],this.m[3][2])/t,r.A[0][3]=-m(this.m[0][1],this.m[0][2],this.m[0][3],this.m[1][1],this.m[1][2],this.m[1][3],this.m[2][1],this.m[2][2],this.m[2][3])/t,r.A[1][3]=+m(this.m[0][0],this.m[0][2],this.m[0][3],this.m[1][0],this.m[1][2],this.m[1][3],this.m[2][0],this.m[2][2],this.m[2][3])/t,r.A[2][3]=-m(this.m[0][0],this.m[0][1],this.m[0][3],this.m[1][0],this.m[1][1],this.m[1][3],this.m[2][0],this.m[2][1],this.m[2][3])/t,r.A[3][3]=+m(this.m[0][0],this.m[0][1],this.m[0][2],this.m[1][0],this.m[1][1],this.m[1][2],this.m[2][0],this.m[2][1],this.m[2][2])/t,r)}transponse(){return o(this.m[0][0],this.m[1][0],this.m[2][0],this.m[3][0],this.m[0][1],this.m[1][1],this.m[2][1],this.m[3][1],this.m[0][2],this.m[1][2],this.m[2][2],this.m[3][2],this.m[0][3],this.m[1][3],this.m[2][3],this.m[3][3])}}function m(t,s,i,h,m,e,r,o,n){return t*m*n+s*e*r+i*h*o-t*e*o-s*h*n-i*m*r}function e(t){let s=i(t),h=Math.sin(s),m=Math.cos(s);return o([[m,0,-h,0],[0,1,0,0],[h,0,m,0],[0,0,0,1]])}function o(...t){return new h(...t)}class n{Loc=s();At=s();Dir=s();Right=s();Up=s();matrView=o();MatrProj=o();MatrVP=o();FrameW=0;FrameH=0;Wp=0;Hp=0;ProjSize=0;ProjDist=0;ProjFarClip=0;set(t,i,h){return this.matrView=function(t,s,i){let h=s.sub(t).normalize(),m=h.cross(i).normalize(),e=m.cross(h).normalize();return o([[m.x,e.x,-h.x,0],[m.y,e.y,-h.y,0],[m.z,e.z,-h.z,0],[-t.dot(m),-t.dot(e),t.dot(h),1]])}(t,i,h),this.Right=s(this.matrView.m[0][0],this.matrView.m[1][0],this.matrView.m[2][0]),this.Up=s(this.matrView.m[0][1],this.matrView.m[1][1],this.matrView.m[2][1]),this.Dir=s(-this.matrView.m[0][2],-this.matrView.m[1][2],-this.matrView.m[2][2]),this.Loc=t,this.At=i,this.MatrVP=this.matrView.mul(this.MatrProj),this}setProj(t,s,i){let h,m;var e,r,n,l,a,d;this.ProjDist=s,this.ProjFarClip=i,h=m=this.ProjSize=t,this.FrameW>=this.FrameH?h*=this.FrameW/this.FrameH:m*=this.FrameH/this.FrameW,this.Wp=h,this.Hp=m,this.MatrProj=(e=-h/2,r=h/2,n=-m/2,l=m/2,a=this.ProjDist,d=this.ProjFarClip,o([[2*a/(r-e),0,0,0],[0,2*a/(l-n),0,0],[(r+e)/(r-e),(l+n)/(l-n),-(d+a)/(d-a),-1],[0,0,-2*a*d/(d-a),0]])),this.MatrVP=this.matrView.mul(this.MatrProj)}setSize(t,s){this.FrameW=t,this.FrameH=s,this.setProj(this.ProjSize,this.ProjDist,this.ProjFarClip)}}function l(){const t=()=>{const t=new Date;return t.getMilliseconds()/1e3+t.getSeconds()+60*t.getMinutes()};return this.response=(s=null)=>{let i=t();this.globalTime=i,this.globalDeltaTime=i-this.oldTime,this.isPause?(this.localDeltaTime=0,this.pauseTime+=i-this.oldTime):(this.localDeltaTime=this.globalDeltaTime,this.localTime=i-this.pauseTime-this.startTime),this.frameCounter++,i-this.oldTimeFPS>3&&(this.FPS=this.frameCounter/(i-this.oldTimeFPS),this.oldTimeFPS=i,this.frameCounter=0,null!=s&&(document.getElementById(s).innerHTML=this.getFPS())),this.oldTime=i},this.getFPS=()=>{this.FPS.toFixed(3)},this.globalTime=this.localTime=t(),this.globalDeltaTime=this.localDeltaTime=0,this.startTime=this.oldTime=this.oldTimeFPS=this.globalTime,this.frameCounter=0,this.isPause=!1,this.FPS=30,this.pauseTime=0,this}console.log("Done.");class a{async _init(t,s){this.name=t,this.id=null,this.shaders=[{id:null,type:s.gl.VERTEX_SHADER,name:"vert",src:""},{id:null,type:s.gl.FRAGMENT_SHADER,name:"frag",src:""}];for(const s of this.shaders){let i=await fetch(`bin/shaders/${t}/${s.name}.glsl`),h=await i.text();"string"==typeof h&&""!=h&&(s.src=h)}this.updateShadersSource(s)}updateShadersSource(t){if(this.shaders[0].id=null,this.shaders[1].id=null,this.id=null,""!=this.shaders[0].src&&""!=this.shaders[1].src){if(this.shaders.forEach((s=>{if(s.id=t.gl.createShader(s.type),t.gl.shaderSource(s.id,s.src),t.gl.compileShader(s.id),!t.gl.getShaderParameter(s.id,t.gl.COMPILE_STATUS)){let i=t.gl.getShaderInfoLog(s.id);console.log(`Shader ${this.name}/${s.name} compile fail: ${i}`)}})),this.id=t.gl.createProgram(),this.shaders.forEach((s=>{null!=s.id&&t.gl.attachShader(this.id,s.id)})),t.gl.linkProgram(this.id),!t.gl.getProgramParameter(this.id,t.gl.LINK_STATUS)){let s=t.gl.getProgramInfoLog(this.id);console.log(`Shader program ${this.name} link fail: ${s}`)}this.updateShaderData(t)}}updateShaderData(t){t.shd.posLoc=t.gl.getAttribLocation(t.shd.id,"InPosition"),t.shd.posN=t.gl.getAttribLocation(t.shd.id,"InNormal"),t.shd.timeLoc=t.gl.getUniformLocation(t.shd.id,"Time"),t.shd.mouseLoc=t.gl.getUniformLocation(t.shd.id,"Mouse"),t.shd.camDirLoc=t.gl.getUniformLocation(t.shd.id,"CamDir"),t.shd.worldLoc=t.gl.getUniformLocation(t.shd.id,"World"),t.shd.VPLoc=t.gl.getUniformLocation(t.shd.id,"VP")}constructor(t,s){this._init(t,s)}apply(t){null!=t.shd.id&&t.gl.useProgram(t.shd.id)}}class d{pos=s();n=s()}function c(...t){return new d(...t)}class u{type;trans=o();constructor(t,h,m){this.numOfElements=0;let r=[],n=0;!function(t,i){let h;for(h=0;h<t.length;h++)t[h].n=s(0);for(h=0;h<i.length;h+=3){let s=i[h],m=i[h+1],e=i[h+2],r=t[s].pos,o=t[m].pos,n=t[e].pos,l=o.sub(r).cross(n.sub(r)).normalize();t[s].n=t[s].n.add(l),t[m].n=t[m].n.add(l),t[e].n=t[e].n.add(l)}for(h=0;h<t.length;h++)t[h].n=t[h].n.normalize()}(t,h);for(let s of t)r[n++]=s.pos.x,r[n++]=s.pos.y,r[n++]=s.pos.z,r[n++]=s.n.x,r[n++]=s.n.y,r[n++]=s.n.z;this.vertexArray=m.gl.createVertexArray(),m.gl.bindVertexArray(this.vertexArray),this.vertexBufer=m.gl.createBuffer(),m.gl.bindBuffer(m.gl.ARRAY_BUFFER,this.vertexBufer),m.gl.bufferData(m.gl.ARRAY_BUFFER,new Float32Array(r),m.gl.STATIC_DRAW),-1!=m.shd.posLoc&&(m.gl.vertexAttribPointer(m.shd.posLoc,3,m.gl.FLOAT,!1,24,0),m.gl.enableVertexAttribArray(m.shd.posLoc)),-1!=m.shd.posN&&(m.gl.vertexAttribPointer(m.shd.posN,3,m.gl.FLOAT,!1,24,12),m.gl.enableVertexAttribArray(m.shd.posN)),this.indexArray=m.gl.createBuffer(),m.gl.bindBuffer(m.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),m.gl.bufferData(m.gl.ELEMENT_ARRAY_BUFFER,new Float32Array([].concat(...h)),m.gl.STATIC_DRAW),this.numOfElements=h.length,this.rnd=m,function(t,s){let h,m;t.hammer=new Hammer(t.canvas),t.hammer.on("press",(t=>{h=t.center.x,m=t.center.y,console.log(t.center)})),t.hammer.on("pan",(t=>{null==h&&(h=t.center.x,m=t.center.y);let r=t.center.x-h,n=t.center.y-m;s.trans=s.trans.mul(e(r).mul(function(t){let s=i(t),h=Math.sin(s),m=Math.cos(s);return o([[1,0,0,0],[0,m,h,0],[0,-h,m,0],[0,0,0,1]])}(n))),t.isFinal?(h=void 0,m=void 0):(h=t.center.x,m=t.center.y)}))}(m,this)}draw(t){null==t&&(t=o()),this.world=this.trans.mul(t),this.rnd.gl.bindVertexArray(this.vertexArray),this.rnd.gl.bindBuffer(this.rnd.gl.ELEMENT_ARRAY_BUFFER,this.indexArray),-1!=this.rnd.shd.worldLoc&&this.rnd.gl.uniformMatrix4fv(this.rnd.shd.worldLoc,!1,new Float32Array([].concat(...this.world.m))),-1!=this.rnd.shd.VPLoc&&this.rnd.gl.uniformMatrix4fv(this.rnd.shd.VPLoc,!1,new Float32Array([].concat(...this.rnd.camera.MatrVP.m))),this.rnd.gl.drawArrays(this.rnd.gl.TRIANGLES,0,this.numOfElements)}}function g(...t){return new u(...t)}class p{constructor(t,i){let h,m=Math.sqrt(2),e=Math.sqrt(3);this.vert=[];let r=[];for(this.ind=[],h=0;h<4;h++)this.vert[h]=c(),this.vert[h].pos=s(),this.vert[h].n=s();let n=s(0),l=s(-t/2,0,e/2*t),a=s(t/2,0,e/2*t),d=s(0,e*m*t/3,e/3*t);for(h=0;h<12;h++)r[h]=c();for(r[0].pos=l,r[1].pos=n,r[2].pos=a,r[3].pos=d,r[4].pos=l,r[5].pos=a,r[6].pos=d,r[7].pos=n,r[8].pos=l,r[9].pos=d,r[10].pos=a,r[11].pos=n,h=0;h<r.length;h++)this.ind[h]=h;var u;this.primmitive=g(r,this.ind,i),this.primmitive.trans=o([[1,0,0,0],[0,1,0,0],[0,0,1,0],[(u=s(0,-e*m*t/6,-m/3*t)).x,u.y,u.z,1]])}draw(t){this.primmitive.draw(t)}}class f{constructor(t,i){this.vert=[];let h=[];this.ind=[];let m,e=t/2,r=s(-e,-e,-e),o=s(-e,-e,e),n=s(e,-e,e),l=s(e,-e,-e),a=s(-e,e,-e),d=s(-e,e,e),u=s(e,e,e),p=s(e,e,-e);for(m=0;m<48;m++)h[m]=c();m=0,h[m++].pos=o,h[m++].pos=r,h[m++].pos=n,h[m++].pos=n,h[m++].pos=r,h[m++].pos=l,h[m++].pos=r,h[m++].pos=d,h[m++].pos=a,h[m++].pos=r,h[m++].pos=o,h[m++].pos=d,h[m++].pos=n,h[m++].pos=u,h[m++].pos=d,h[m++].pos=n,h[m++].pos=d,h[m++].pos=o,h[m++].pos=n,h[m++].pos=l,h[m++].pos=u,h[m++].pos=l,h[m++].pos=p,h[m++].pos=u,h[m++].pos=r,h[m++].pos=a,h[m++].pos=p,h[m++].pos=r,h[m++].pos=p,h[m++].pos=l,h[m++].pos=a,h[m++].pos=d,h[m++].pos=u,h[m++].pos=a,h[m++].pos=u,h[m++].pos=p;for(let t=0;t<m;t++)this.ind[t]=t;this.primmitive=g(h,this.ind,i)}draw(t){this.primmitive.draw(t)}}const y=s(0,1,0),A=s(0,.5,2);class x{constructor(t){if(this.canvas=document.querySelector("#"+t),this.gl=this.canvas.getContext("webgl2"),this.gl.enable(this.gl.DEPTH_TEST),null==this.gl)return alert("WebGL2 not supported"),null;this.gl.clearColor(.3,.47,.8,1),this.gl.clear(this.gl.COLOR_BUFFER_BIT),this.shd=function(t,s){return new a(t,s)}("def",this),this.flag=!1,this.camera=function(...t){return new n(...t)}(),this.camera.set(A,s(0),y),this.camera.setProj(.1,.1,300),this.camera.setSize(300,300),this.timer=new l}render(t,s){const i=()=>{this.gl.clearColor(.3,.47,.8,1),this.flag?(this.shd.apply(this),this.timer.response(),function(t){t.gl.clear(t.gl.COLOR_BUFFER_BIT);const s=new Date;window.t=60*s.getMinutes()+s.getSeconds()+s.getMilliseconds()/1e3,-1!=t.shd.timeLoc&&t.gl.uniform1f(t.shd.timeLoc,window.t),-1!=t.shd.mouseLoc&&t.gl.uniform3f(t.shd.mouseLoc,0,0,0),-1!=t.shd.camDirLoc&&t.gl.uniform3f(t.shd.camDirLoc,!1,t.camera.Dir.x,t.camera.Dir.y,t.camera.z)}(this),s()):null!=this.shd.id&&(this.shd.apply(this),this.shd.updateShaderData(this),t(),this.prg=this.shd.id,this.flag=!0),window.requestAnimationFrame(i)};i()}}function w(...t){return new x(...t)}window.addEventListener("load",(()=>{let t=w("glCanvas1"),s=w("glCanvas2");t.render((()=>{t.tetr=function(...t){return new p(...t)}(1,t)}),(()=>{t.tetr.draw(e(0))})),s.render((()=>{s.cube=function(...t){return new f(...t)}(1,s)}),(()=>{s.cube.draw()}))}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
